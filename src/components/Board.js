import React from 'react';
import Square from './Square';

const Board = () => {
  const [squares, setSquares] = React.useState(Array(9).fill(null));
  const [xIsNext, setXIsNext] = React.useState(true);
  const [showModal, setShowModal] = React.useState(false);
	const [modalMessage, setModalMessage] = React.useState('');
	const [vsBot, setVsBot] = React.useState(false);

  const winner = calculateWinner(squares);

  const handleClick = (i) => {
    if (squares[i] || winner) return;

    const nextSquares = squares.slice();
    nextSquares[i] = xIsNext ? 'X' : 'O';
    setSquares(nextSquares);
    setXIsNext(!xIsNext);
  };

  React.useEffect(() => {
  if (vsBot && !xIsNext && !winner && squares.some(sq => sq === null)) {
    // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
    const timer = setTimeout(() => {
      const botMove = findBestMove(squares);
      const nextSquares = squares.slice();
      nextSquares[botMove] = 'O';
      setSquares(nextSquares);
      setXIsNext(true);
    }, 500); // –∏–º–∏—Ç–∞—Ü–∏—è "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"

    return () => clearTimeout(timer);
  }
}, [squares, xIsNext, vsBot]);

  const renderSquare = (i) => {
    return <Square value={squares[i]} onClick={() => handleClick(i)} />;
  };

	const resetGame = () => {
	  setSquares(Array(9).fill(null));
	  setXIsNext(true);
	};

  let status;
  if (!winner) {
    status = '–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: ' + (xIsNext ? 'X' : 'O');
  }

  React.useEffect(() => {
	  const winner = calculateWinner(squares);

	  if (winner) {
	    setModalMessage(`üéâ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ ${winner}!`);
	    setShowModal(true);
	  } else if (!squares.includes(null)) {
	    setModalMessage('ü§ù –ù–∏—á—å—è!');
	    setShowModal(true);
	  }
	}, [squares]);

  return (
    <div>
      <div className="status">{status}</div>
      <div className="game-mode">
  <label>
    <input
      type="checkbox"
      checked={vsBot}
      onChange={(e) => setVsBot(e.target.checked)}
    />
    ü§ñ –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
  </label>
</div>
      <div className="board-row">
        {renderSquare(0)}
        {renderSquare(1)}
        {renderSquare(2)}
      </div>
      <div className="board-row">
        {renderSquare(3)}
        {renderSquare(4)}
        {renderSquare(5)}
      </div>
      <div className="board-row">
        {renderSquare(6)}
        {renderSquare(7)}
        {renderSquare(8)}
      </div>
      <div className="game-controls">
		  <button onClick={resetGame}>üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
		</div>
		{showModal && (
		  <div className="modal-overlay">
		    <div className="modal">
		      <h2>{modalMessage}</h2>
		      <button onClick={() => {
		        setShowModal(false);
		        resetGame();
		      }}>
		        –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
		      </button>
		    </div>
		  </div>
		)}
    </div>
  );
};

function minimax(squares, depth, isMaximizing) {
  const winner = calculateWinner(squares);

  // –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
  if (winner === 'O') return 10 - depth;  // –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª
  if (winner === 'X') return depth - 10;  // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
  if (!squares.includes(null)) return 0;  // –ù–∏—á—å—è

  if (isMaximizing) {
    // –•–æ–¥ –±–æ—Ç–∞ ‚Äî –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let bestScore = -Infinity;
    for (let i = 0; i < squares.length; i++) {
      if (squares[i] === null) {
        squares[i] = 'O';
        const score = minimax(squares, depth + 1, false);
        squares[i] = null;
        bestScore = Math.max(score, bestScore);
      }
    }
    return bestScore;
  } else {
    // –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ‚Äî –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let bestScore = Infinity;
    for (let i = 0; i < squares.length; i++) {
      if (squares[i] === null) {
        squares[i] = 'X';
        const score = minimax(squares, depth + 1, true);
        squares[i] = null;
        bestScore = Math.min(score, bestScore);
      }
    }
    return bestScore;
  }
}

// –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞
function findBestMove(squares) {
  let bestScore = -Infinity;
  let move = null;

  for (let i = 0; i < squares.length; i++) {
    if (squares[i] === null) {
      squares[i] = 'O';
      const score = minimax(squares, 0, false);
      squares[i] = null;

      if (score > bestScore) {
        bestScore = score;
        move = i;
      }
    }
  }

  return move;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];

  for (let [a, b, c] of lines) {
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }

  return null;
}

export default Board;